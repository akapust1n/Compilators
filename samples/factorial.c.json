{"FileAST: ": {"ext[0]": {"FuncDef: ": {"decl": {"Decl: main, [], [], []": {"type": {"FuncDecl: ": {"type": {"TypeDecl: main, []": {"type": {"IdentifierType: ['int']": {}}}}}}}}, "body": {"Compound: ": {"block_items[0]": {"Decl: n, [], [], []": {"type": {"TypeDecl: n, []": {"type": {"IdentifierType: ['int']": {}}}}}}, "block_items[1]": {"Decl: i, [], [], []": {"type": {"TypeDecl: i, []": {"type": {"IdentifierType: ['int']": {}}}}}}, "block_items[2]": {"Decl: factorial, [], [], []": {"type": {"TypeDecl: factorial, []": {"type": {"IdentifierType: ['unsigned', 'long', 'long']": {}}}}, "init": {"Constant: int, 1": {}}}}, "block_items[3]": {"FuncCall: ": {"name": {"ID: printf": {}}, "args": {"ExprList: ": {"exprs[0]": {"Constant: string, \"Enter an integer: \"": {}}}}}}, "block_items[4]": {"FuncCall: ": {"name": {"ID: scanf": {}}, "args": {"ExprList: ": {"exprs[0]": {"Constant: string, \"%d\"": {}}, "exprs[1]": {"UnaryOp: &": {"expr": {"ID: n": {}}}}}}}}, "block_items[5]": {"If: ": {"cond": {"BinaryOp: <": {"left": {"ID: n": {}}, "right": {"Constant: int, 0": {}}}}, "iftrue": {"FuncCall: ": {"name": {"ID: printf": {}}, "args": {"ExprList: ": {"exprs[0]": {"Constant: string, \"Error! Factorial of a negative number doesn't exist.\"": {}}}}}}, "iffalse": {"Compound: ": {"block_items[0]": {"For: ": {"init": {"Assignment: =": {"lvalue": {"ID: i": {}}, "rvalue": {"Constant: int, 1": {}}}}, "cond": {"BinaryOp: <=": {"left": {"ID: i": {}}, "right": {"ID: n": {}}}}, "next": {"UnaryOp: ++": {"expr": {"ID: i": {}}}}, "stmt": {"Compound: ": {"block_items[0]": {"Assignment: *=": {"lvalue": {"ID: factorial": {}}, "rvalue": {"ID: i": {}}}}}}}}, "block_items[1]": {"FuncCall: ": {"name": {"ID: printf": {}}, "args": {"ExprList: ": {"exprs[0]": {"Constant: string, \"Factorial of %d = %llu\"": {}}, "exprs[1]": {"ID: n": {}}, "exprs[2]": {"ID: factorial": {}}}}}}}}}}, "block_items[6]": {"Return: ": {"expr": {"Constant: int, 0": {}}}}}}}}}}