Wrap not
Block not
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
here1
()
{
    int a [5];
}
\s*(\()
FunctionArgs not
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
here1
()
{
    int a [5];
}
\s*(\(\))
\{ ss
here1

{
    int a [5];
}
\s*(\{)
Block not
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\s ss
here1
 [5];
}
\s*(\s)
Block not
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
; ss
cant match
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
; ss
cant match
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\} ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\s ss
cant match
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
here1
()
{
    int a [5];
}
\s*(\()
FunctionArgs not
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
here1
()
{
    int a [5];
}
\s*(\(\))
\{ ss
here1

{
    int a [5];
}
\s*(\{)
Block not
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\s ss
here1
 [5];
}
\s*(\s)
Block not
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
; ss
cant match
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Declaration not
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Type not
int ss
cant match
char ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
Expr not
Expr2 not
SimpleExpr not
Assignment not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
UnOp not
UnaryOperator not
! ss
cant match
\~ ss
cant match
- ss
cant match
\+ ss
cant match
\( ss
cant match
FunctionCall not
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
cant match
Integer not
[1-9][0-9]* ss
cant match
0 ss
cant match
String not
" ss
cant match
Char not
' ss
cant match
; ss
cant match
Statement not
If not
if ss
cant match
if ss
cant match
ForLoop not
for ss
cant match
Function not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\( ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\(\) ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1

    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
\} ss
cant match
Return not
return ss
cant match
Declaration not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
; ss
cant match
Declaration not
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
= ss
cant match
Type not
int ss
here1
int main()
{
    int a [5];
}
\s*(int)
Identifier not
[a-zA-Z_][a-zA-Z0-9_]* ss
here1
 main()
{
    int a [5];
}
\s*([a-zA-Z_][a-zA-Z0-9_]*)
()
{
    int a [5];
}
